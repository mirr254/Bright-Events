jobs:
  build:
  # set up environment required to run our pipeline
    working_directory: ~/workspace
    docker:
      - image: circleci/python:2.7
        environment:
          RDS_DB_NAME: circleci
          RDS_HOST: localhost
          RDS_PORT: 5432
          RDS_USERNAME: root
          RDS_PASSWORD: 
      - image: circleci/postgres:9.6
        environment:
          POSTGRES_USER: root
          POSTGRES_DB: circleci
          POSTGRES_PASSWORD: password
    steps:
      - checkout
      
      # - setup_remote_docker:
      #     docker_layer_caching: yes

      - add_ssh_keys:
          fingerprints:
            - 8a:26:b1:10:53:d6:93:8b:47:ad:09:8e:9d:af:77:cf
      
      # install app dendencies
      - run:
          name: install dependencies.
          command: sudo pip install -Ur requirements.txt

      # install deployment dependencies
      - run:
          name: install deployment dependencies
          command: |
            if [ "${CIRCLE_BRANCH}" == "circleci-project-setup" ]; then
                sudo bash resources/dependencies.sh 
                sudo pip install ansible docker 
            fi 

      # build tag and push using ansible
      - deploy:
          name: Building, Tagging and Pushing docker images
          command: |
              if [ "${CIRCLE_BRANCH}" == "circleci-project-setup" ]; then
                 ansible-playbook resources/packer/ansible.build.yaml
              fi 



      # # lint
      # - run:
      #     name: Run linter
      #     working_directory: ~/workspace/app
      #     command: | 
      #         mkdir -p test-reports/flake8
      #         flake8 . --output-file=test-reports/flake8/flake8.txt
      # # tests
      # - run:
      #     name: Run tests
      #     command: coverage run manage.py test
      # - run:
      #     name: Create Test Reports.
      #     working_directory: ~/workspace/app
      #     command: |
      #         flake8_junit test-reports/flake8/flake8.txt test-resports/flake8/flake8_junit.xml
      #         coverage html -d test-reports/coverage
      #     when: always
      # # upload and store the reports
      # - store_test_results:
      #     path: app/test-reports
      # - store_artifacts:
      #     path: app/test-reports
      #     destination: tr1
        